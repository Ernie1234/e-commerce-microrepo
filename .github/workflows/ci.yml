name: CI

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

permissions:
  actions: read
  contents: read

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Cache node_modules
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      # --- Install kill-port globally for the pre-server cleanup ---
      - name: Install kill-port
        run: npm install -g kill-port

      # --- Proactively kill port 6001 before starting services ---
      - name: Kill existing process on port 6001
        run: npx kill-port 6001 || true # Use npx to ensure it runs, || true to prevent failure if port is free

      - name: Generate Swagger Docs
        run: npm run auth-docs -- --verbose
      - name: Debug Generated Swagger JSON (Temporary)
        run: |
          ls -la apps/auth-service/src/utils/docs/ # List to confirm file exists
          cat apps/auth-service/src/utils/docs/swagger-output.json || echo "swagger-output.json not found or empty" # Print content

        continue-on-error: true

      - name: Set Nx affected base and head
        uses: nrwl/nx-set-shas@v4

      # --- NEW STEP: Start Auth Service in Background ---
      # It's crucial to run the auth-service before its E2E tests
      - name: Start Auth Service
        env:
          # Adding DEBUG environment variable for more verbose Node.js output
          DEBUG: '*' # This enables debug logs from various modules
          # Non-sensitive or fixed variables
          PORT: ${{ vars.AUTH_SERVICE_PORT || 6001 }} # Use GitHub Actions variable or fallback
          REDIS_PORT: 6379
          SMTP_SERVICE: 'gmail'
          SMTP_HOST: 'smtp.gmail.com'
          SMTP_PORT: 465
          NODE_ENV: 'development'

          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
        run: |
          # Use `npm exec` to run the nx serve command directly in the shell
          # The `&` runs it in the background
          # We use `nohup` for robustness (prevents it from dying if the shell exits prematurely)
          # And `bash -c '...'` ensures the command is executed as a single unit
          nohup bash -c 'npx nx serve auth-service --port $PORT &'
          # Wait for the service to actually be listening on the port
          # Install wait-on if not already available in the runner
          npm install -g wait-on
          wait-on tcp:$PORT -t 120000 # Wait for up to 2 minutes

      - name: Run Nx affected lint test build
        run: npx nx affected -t lint test build

      - name: Stop Auth Service
        if: always() # This ensures the cleanup runs even if previous steps fail
        env:
          PORT: ${{ vars.AUTH_SERVICE_PORT || 6001 }}
        run: |
          # Use lsof for Linux to find the process ID using the port and kill it
          # `|| true` prevents the step from failing if no process is found (e.g., if it already crashed)
          kill $(lsof -t -i:$PORT) || true
          echo "Killed process on port $PORT"
